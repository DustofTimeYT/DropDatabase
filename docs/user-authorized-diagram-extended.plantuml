@startuml
actor User
boundary Client
control "AuthController" as AC
control "AuthService" as AS
control "ProfileService" as PS
control "TokenValidator" as TV
boundary "AccountRepository" as AR
boundary "ProfileRepository" as PR
entity "Profile" as P
actor "ExternalAuthSystem" as EAS

User -> Client: initiateLogin()
activate Client

Client -> User: showAuthOptions()
activate User

alt User selects auth method
    User -> Client: selectAuthMethod(method)
    deactivate User

    Client -> AC: redirectToAuth(method)

    activate AC
    AC -> User: redirect to external auth
    deactivate AC

    User -> EAS: authenticate(credentials)
    activate EAS
    EAS -> EAS: processAuth()
    EAS -> Client: redirect with token
    deactivate EAS

    Client -> AC: callback(token)

    activate AC

    AC -> AS: validateToken(token)
    activate AS

    AS -> TV: validate(token)
    activate TV
    TV --> AS: validationResult
    deactivate TV

    alt Token is valid
        AS -> AR: findAccountByExternalId(externalId)
        activate AR
        AR --> AS: account
        deactivate AR

        alt Account exists
            AS -> AR: getProfileForAccount(account)
            activate AR
            AR --> AS: profile
            deactivate AR

            AS --> AC: success(profile)
            deactivate AS

            AC -> Client: showPersonalCabinet(profile)
            deactivate AC

            Client -> User: display personal cabinet
            deactivate Client

        else First time user (no account)
            AS -> PS: createProfile(externalData)
            activate PS

            PS -> PR: createProfile(externalData)
            activate PR
            PR -> P: new Profile(externalData)
            activate P
            P --> PR: newProfile
            deactivate P
            PR --> PS: newProfile

            deactivate PR

            PS -> PR: save(newProfile)
            activate PR
            PR --> PS: savedProfile
            deactivate PR

            PS -> AR: createAccount(externalId, savedProfile)
            activate AR
            AR --> PS: newAccount
            deactivate AR

            PS --> AS: profile
            deactivate PS

            AS --> AC: success(profile)
            deactivate AS

            AC -> Client: showWelcomeAndPersonalCabinet(profile)
            deactivate AC

            Client -> User: display welcome message and personal cabinet
            deactivate Client
        end

    else Token is invalid/expired
        AS --> AC: error("Invalid token")
        deactivate AS

        AC -> Client: showAuthError()
        deactivate AC

        Client -> User: display error and retry prompt
        deactivate Client
    end

else User cancels auth
    User -> Client: cancelAuth()
    deactivate User

    Client -> User: showLoginPage()
    deactivate Client
end

@enduml
